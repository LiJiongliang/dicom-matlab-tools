function rtplan = LoadJSONPlan(json)
% LoadJSONPlan parses relevant tags from a Conventional IMRT/VMAT DICOM RT 
% Plan structure that has been stored in JSON format (see QueryMobius for a
% description of this format). This function returns a DICOM-compatible 
% structure similar to the format had the RT plan been loaded using
% dicominfo().
%
% The following variables are required for proper execution: 
%   json: structure containing DICOM RT Plan header tags, where the keys
%       correspond to the header group/element hex codes in the format
%       GXXX/EXXX.
%
% The following variables are returned upon succesful completion:
%   rtplan: structure containing patient demographics, beam information,
%       and prescription details.
%
% Author: Mark Geurts, mark.w.geurts@gmail.com
% Copyright (C) 2015 University of Wisconsin Board of Regents
%
% This program is free software: you can redistribute it and/or modify it 
% under the terms of the GNU General Public License as published by the  
% Free Software Foundation, either version 3 of the License, or (at your 
% option) any later version.
%
% This program is distributed in the hope that it will be useful, but 
% WITHOUT ANY WARRANTY; without even the implied warranty of 
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
% Public License for more details.
% 
% You should have received a copy of the GNU General Public License along 
% with this program. If not, see http://www.gnu.org/licenses/.

% Execute in try/catch statement
try
    
% Log start of plan load and start timer
if exist('Event', 'file') == 2
    Event('Extracting plan info from JSON structure');
    tic;
end

% Store patient and plan fields
rtplan.SpecificCharacterSet = json.G0008E0005;
rtplan.SOPClassUID = json.G0008E0016;
rtplan.SOPInstanceUID = json.G0008E0018;
rtplan.StudyDate = json.G008E0020;
rtplan.StudyTime = json.G008E0030;
rtplan.AccessionNumber = json.G008E0050;
rtplan.Modality = json.G0008E0060;
rtplan.Manufacturer = json.G0008E0070;
rtplan.ReferringPhysicianName = json.G0008E0090;
rtplan.StationName = json.G0008E1010;
rtplan.StudyDescription = json.G0008E1030;
rtplan.OperatorName = json.G0008E1070;
rtplan.ManufacturerModelName = json.G0008E1090;
rtplan.PatientName = json.G0010E0010;
rtplan.PatientID = json.G0010E0020;
rtplan.PatientBirthDate = json.G0010E0030;
rtplan.PatientSex = json.G0010E0040;
rtplan.SoftwareVersion = json.G0018E1020;
rtplan.StudyInstanceUID = json.G0020E000d;
rtplan.SeriesInstanceUID = json.G0020E000e;
rtplan.StudyID = json.G0020E0010;
rtplan.SeriesNumber = json.G0020E0011;

% Store RT Plan fields
rtplan.RTPlanLabel = json.G300aE0002;
rtplan.RTPlanName = json.G300aE0003;
rtplan.RTPlanDescription = json.G300aE0004;
rtplan.RTPlanDate = json.G300aE0006;
rtplan.RTPlanTime = json.G300aE0007;
rtplan.RTPlanGeometry = json.G300aE000c;

% Store Fraction group sequence
for i = 1:length(json.G300aE0070)
    
   rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
       .FractionGroupNumber = json.G300aE0070{i}.G300aE0071;
   rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
       .NumberOfFractionsPlanned = json.G300aE0070{i}.G300aE0078;
   rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
       .NumberOfBeams = json.G300aE0070{i}.G300aE0080;
   rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
       .NumberOfBrachyApplicationSetups = json.G300aE0070{i}.G300aE00a0;
   
   % Store referenced beam sequences
   for j = 1:length(json.G300aE0070{1}.G300cE0004)
       
       rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
           .ReferencedBeamSequence.(sprintf('Item_%i', j))...
           .BeamDoseSpecificationPoint ...
           = json.G300aE0070{i}.G300cE0004{j}.G300aE0082;
       rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
           .ReferencedBeamSequence.(sprintf('Item_%i', j)).BeamDose ...
           = json.G300aE0070{i}.G300cE0004{j}.G300aE0084;
       rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
           .ReferencedBeamSequence.(sprintf('Item_%i', j)).BeamMeterset ...
           = json.G300aE0070{i}.G300cE0004{j}.G300aE0086;
       rtplan.FractionGroupSequence.(sprintf('Item_%i', i))...
           .ReferencedBeamSequence.(sprintf('Item_%i', j))...
           .ReferencedBeamNumber ...
           = json.G300aE0070{i}.G300cE0004{j}.G300cE0006;
   end
end

% Initialize control point counter
cp = 0;

% Store beam sequences
for i = 1:length(json.G300aE00b0)

    rtplan.BeamSequence.(sprintf('Item_%i', i)).Manufacturer = ...
        json.G300aE00b0{i}.G0008E0070;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).InstitutionName = ...
        json.G300aE00b0{i}.G0008E0080;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).TreatmentMachineName = ...
        json.G300aE00b0{i}.G300aE00b2;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).PrimaryDosimeterUnit = ...
        json.G300aE00b0{i}.G300aE00b3;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).SourceAxisDistance = ...
        json.G300aE00b0{i}.G300aE00b4;
    
    % Store beam limiting device sequences
    for j = 1:length(json.G300aE00b0{i}.G300aE00b6)
        
        rtplan.BeamSequence.(sprintf('Item_%i', i))...
            .BeamLimitingDeviceSequence.(sprintf('Item_%i', j))...
            .RTBeamLimitingDeviceType = ...
            json.G300aE00b0{i}.G300aE00b6{j}.G300aE00b8;
        rtplan.BeamSequence.(sprintf('Item_%i', i))...
            .BeamLimitingDeviceSequence.(sprintf('Item_%i', j))...
            .SourceToBeamLimitingDeviceDistance = ...
            json.G300aE00b0{i}.G300aE00b6{j}.G300aE00ba;
        rtplan.BeamSequence.(sprintf('Item_%i', i))...
            .BeamLimitingDeviceSequence.(sprintf('Item_%i', j))...
            .NumberOfLeafJawPairs = ...
            json.G300aE00b0{i}.G300aE00b6{j}.G300aE00bc;
    end
    
    rtplan.BeamSequence.(sprintf('Item_%i', i)).BeamNumber = ...
        json.G300aE00b0{i}.G300aE00c0;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).BeamName = ...
        json.G300aE00b0{i}.G300aE00c2;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).BeamType = ...
        json.G300aE00b0{i}.G300aE00c4;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).RadiationType = ...
        json.G300aE00b0{i}.G300aE00c6;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).TreatmentDeliveryType = ...
        json.G300aE00b0{i}.G300aE00ce;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).NumberOfWedges = ...
        json.G300aE00b0{i}.G300aE00d0;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).NumberOfCompensators = ...
        json.G300aE00b0{i}.G300aE00e0;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).NumberOfBoli = ...
        json.G300aE00b0{i}.G300aE00ed;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).NumberOfBlocks = ...
        json.G300aE00b0{i}.G300aE00f0;
    rtplan.BeamSequence.(sprintf('Item_%i', i))...
        .FinalCumulativeMetersetWeight = json.G300aE00b0{i}.G300aE010e;
    rtplan.BeamSequence.(sprintf('Item_%i', i)).NumberOfControlPoints = ...
        json.G300aE00b0{i}.G300aE0110;
    
    % Add number of control points to counter
    cp = cp + length(json.G300aE00b0{i}.G300aE0111);
    
    % Store control point sequences
    for j = 1:length(json.G300aE00b0{i}.G300aE0111)
        
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).ControlPointIndex = json.G300aE00b0{i}...
            .G300aE0111{j}.G300aE0112;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).NominalBeamEnergy = json.G300aE00b0{i}...
            .G300aE0111{j}.G300aE0114;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).DoseRateSet = json.G300aE00b0{i}...
            .G300aE0111{j}.G300aE0115;
        
        % Store beam limiting device sequences
        for k = 1:length(json.G300aE00b0{i}.G300aE0111{j}.G300aE011a)
            
            rtplan.BeamSequence.(sprintf('Item_%i', i))...
                .ControlPointSequence.(sprintf('Item_%i', j))...
                .BeamLimitingDevicePositionSequence...
                .(sprintf('Item_%i', k)).RTBeamLimitingDeviceType = ...
                json.G300aE00b0{i}.G300aE0111{j}.G300aE011a{k}.G300aE00b8;
            rtplan.BeamSequence.(sprintf('Item_%i', i))...
                .ControlPointSequence.(sprintf('Item_%i', j))...
                .BeamLimitingDevicePositionSequence...
                .(sprintf('Item_%i', k)).LeafJawPositions = ...
                json.G300aE00b0{i}.G300aE0111{j}.G300aE011a{k}.G300aE011c;
        end
        
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).GantryAngle = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE011e;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).GantryRotationDirection = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE011f;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).BeamLimitingDeviceAngle = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0120;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).BeamLimitingDeviceRotationDirection = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0121;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).PatientSupportAngle = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0122;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).PatientSupportRotationDirection = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0123;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).TableTopEccentricAngle = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0125;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).TableTopEccentricRotationDirection = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0126;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).TableTopVerticalPosition = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0128;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).TableTopLongitudinalPosition = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0129;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).TableTopLateralPosition = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE012a;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).IsocenterPosition = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE012c;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).SourceToSurfaceDistance = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0130;
        rtplan.BeamSequence.(sprintf('Item_%i', i)).ControlPointSequence...
            .(sprintf('Item_%i', j)).CumulativeMetersetWeight = ...
            json.G300aE00b0{i}.G300aE0111{j}.G300aE0134;
    end
    
    rtplan.BeamSequence.(sprintf('Item_%i', i))...
        .ReferencedPatientSetupNumber = json.G300aE00b0{i}.G300cE006a;
end
    
% Store patient setup sequences
for i = 1:length(json.G300aE0180)
    
    rtplan.PatientSetupSequence.(sprintf('Item_%i', i)).PatientPosition = ...
        json.G300aE0180{i}.G300aE0182;
    rtplan.PatientSetupSequence.(sprintf('Item_%i', i)).PatientSetupNumber = ...
        json.G300aE0180{i}.G0018E5100;
end

% Store referenced structure set sequences
for i = 1:length(json.G300cE0060)    
    
    rtplan.ReferencedStructureSetSequence.(sprintf('Item_%i', i))...
        .ReferencedSOPClassUID = json.G300cE0060{i}.G0008E1150;
    rtplan.ReferencedStructureSetSequence.(sprintf('Item_%i', i))...
        .ReferencedSOPInstanceUID = json.G300cE0060{i}.G0008E1155;
end

% Store approval status
rtplan.ApprovalStatus = json.G300eE0002;

%% Finish up
% Report success
if exist('Event', 'file') == 2
    Event(sprintf(['Plan data loaded successfully with %i beams and %i', ...
        ' control points in %0.3f seconds'], length(json.G300aE00b0), ...
        cp, toc));
end

% Catch errors, log, and rethrow
catch err
    if exist('Event', 'file') == 2
        Event(getReport(err, 'extended', 'hyperlinks', 'off'), 'ERROR');
    else
        rethrow(err);
    end
end
